function bool Standalone.drawCharacterSprite(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
	//Shadow animations will override the normal render
	if (global.xtrachar == 3 && character == CHARACTER_SONIC && variant < 2) //shadow and NOT tails' tails, and NOT FROZEN IN ICZ REDESIGNED
	{//custom render routines
		return ShadowCustomRendering(character, variant, px, py, asSmallGhost)
	}
	else
	{		
		return base.Standalone.drawCharacterSprite(character, variant, px, py, asSmallGhost)
	}
}

define u8 fallingstate = u8[0xffffE656 + ((A0 == 0xffffb000) ? 0 : 0x02)]

global u8 shadow.WallLatch // 0 no latch, 1 can latch, 2 latched right, 3 latched left
global u8 shadow.DropDown //0 no drop, 1 dropped, 2 bounced
global bool shadow.WallJump
global bool shadow.CollisionCheck

global u8 shadow.stateold 
global u8 shadow.FrameCounter //this controls custom animation frames
global u8 shadow.RunFrameOld //this tracks the run frames
//Airdash effect variables
global u8 shadow.Airdash //0 pilots the dash effect like wechnia's
global s16 shadow.AirPX
global s16 shadow.AirPY
global u16 shadow.AirOLDX
global u16 shadow.AirOLDY
//Boost Variables
global u16 shadow.BoostPool
global u16 checkpoint.BoostPool
global bool shadow.isBoosting
global u8 shadow.BoostWave //0 pilots boost burst when activated
global s16 shadow.BoostPX
global s16 shadow.BoostPY
global u16 shadow.BoostOLDX
global u16 shadow.BoostOLDY
global bool shadow.airBoost //to force the airboost animation even if the boost is interrupted mid air. This blocks the homing and the Air Dash too.
global bool shadow.upsidedown.Boost
global bool shadow.rtlcnzbar
global u16 shadow.BoostXTRACK //to determine the boost effect direction on horizontal circling animations (aiz1, fbz...)
global bool shadow.ForceBoostOff
//HOMING VARIABLES
global u8 shadow.Homing // 0-No target/OFF, 1 has a target, 2 is homing
global u32 shadow.target
global u32 shadow.target.OLD //which was the target on the previous frame? If it changes the animation should restart
global u8 shadow.targetsign //controls the target animation
global u8 shadow.HomingTimer //counts to disable the homing if it lasts too long
global u8 shadow.ForceHomingBounce //needed to manage the balloons in cnz, 2 frames
global u8 shadow.homingSOZ2offset //needed as the soz2 head is a LEVEL CHUNK AND CANNOT BE AIMED!
global u8 fallingsprites

global bool hyperBoostInf

//Bluespheres sprites are handled in the renderhooks file

function bool ShadowCustomRendering(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
	bool isPlayer1 = (variant == 0)
	u32 characterAddress = isPlayer1 ? 0xffffb000 : 0xffffb04a
	u8 animationSprite = char.animation.sprite
	u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(character, animationSprite)
	u8 flags = (char.render_flags & 0x03)
	u8 angle = 0
	u64 key = 0
	u8 rotationMode = 0
	
	//no block for tails' tails
	
	if (level.vertical_wrap == 0xff00)
	{
		// For vertically wrapping levels, "normalize" py into interval [-move_area.bottom.target * 3/4, -move_area.bottom.target * 1/4]
		py &= level.height.bitmask
		if (py > move_area.bottom.target * 3/4 && move_area.bottom.target >= 0xe0)	// move_area.bottom.target is very low in DEZ boss act
			py -= move_area.bottom.target
	}

	if (variant < 2)
	{//It's a character, not Tails' Tails
		//RESET COUNTER IF STATE HAS CHANGED
		if (char.state != shadow.stateold)
		{
			shadow.FrameCounter = 0
		}
		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			// Character
			if (animationSprite >= 0x01 && animationSprite <= 0x20)
			{
				animationSprite = 0x01 + (animationSprite - 0x01) % 8
				rotationMode = 1
			}
			else if (animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				animationSprite = 0x21 + (animationSprite - 0x21) % 4
				rotationMode = 1
			}
			else if (animationSprite >= 0x78 && animationSprite <= 0x7f)
			{
				animationSprite = 0x78
				rotationMode = 2
			}

			if (rotationMode != 0)
			{
				s8 oldRotation = isPlayer1 ? oldRotationPlayer1 : oldRotationPlayer2
				flags = char.flags & char.flag.FACING_LEFT		// This really has to be "char.flags", not "char.render_flags"

				angle = char.rotation
				if (rotationMode == 1)
				{
					if (abs(s8(char.rotation)) <= 0x10 && abs(s8(oldRotation)) <= 0x10)
					{
						angle = 0
					}

					if (angle != char.rotation)
					{
						s8 diff = angle - oldRotation
						angle = oldRotation + clamp(diff, -3, 3)
					}
				}
			}

			if (isPlayer1)
				oldRotationPlayer1 = angle
			else
				oldRotationPlayer2 = angle
		}
        //CUSTOM ANIMATIONS FOR SHADOW
		//KILL THE BOOST ACTION (AND THE HOMING!) ON SOME ANIMATION FRAMES FOR ACTIONS THAT MUST STOP THE BOOST
		if ((shadow.isBoosting ||shadow.airBoost||shadow.Homing > 0) && ((animationSprite >= 0x55 && animationSprite <= 0x68)||(animationSprite >= 0x78 && animationSprite <= 0x85)||(animationSprite >= 0x90 && animationSprite <= 0x95)||(animationSprite >= 0xda && animationSprite <= 0xe3)||(animationSprite >= 0xef && animationSprite <= 0xfa)))
		{
			shadow.airBoost = false
			shadow.isBoosting = false
			char.double_jump_state = 2
			shadow.Homing = 0
			shadow.HomingTimer = 0
			if (!super.active || !super.active & 0x80 && !global.super_emeralds == 7)
    	    {
        	    loadCharacterPalette(CHARACTER_SONIC, 0x802000 + 0x00, 0)
        	}
		}
		// HANDLES CUSTOM RUN, WALL LATCH, BOOST, STOMP and FLOAT when transformed		
		if (global.xtrachar == 3 && character == CHARACTER_SONIC && variant < 2)
		{			
			//Shadow has a lot of sprites that need to be replaced and snapped if smooth rotation is disabled
			//Angle snapper for all the missing sprites
			if (!Game.getSetting(SETTING_SMOOTH_ROTATION))
			{
				//WALK
				if (animationSprite >= 0x01 && animationSprite <= 0x20)
				{
					angle = (animationSprite - 0x01) / 8 * 0xe0 * ((global.inv_gravity) ? -1 : 1)
					if (char.flags & char.flag.FACING_LEFT)
						angle = -angle
					animationSprite = 0x01 + (animationSprite - 0x01) % 8
					//ensures run animation is reset
					shadow.FrameCounter = 0
				}
				//RUN
				else if (animationSprite >= 0x21 && animationSprite <= 0x30)
				{
					angle = (animationSprite - 0x21) / 4 * 0xe0 * ((global.inv_gravity) ? -1 : 1)
					if (char.flags & char.flag.FACING_LEFT)
						angle = -angle
					animationSprite = 0x21 + (animationSprite - 0x21) % 4
				}
				//Hanging in AIZ
				else if (animationSprite >= 0x78 && animationSprite <= 0x7f)
				{
					angle = (animationSprite - 0x78) * 0xe0 * ((global.inv_gravity) ? -1 : 1)
					if (char.flags & char.flag.FACING_LEFT)
						angle = -angle
					animationSprite = 0x78
				}
				//Hanging in MHZ
				else if (animationSprite >= 0xeb && animationSprite <= 0xee)
				{
				    angle = (animationSprite - 0xeb) * 0xe0 * ((global.inv_gravity) ? -1 : 1)
			    	if (char.flags & char.flag.FACING_LEFT)
					    angle = -angle
				    animationSprite = 0xeb
				}
			}
						
			//RUN - Flight when super
			if (animationSprite >= 0x21 && animationSprite <= 0x30)
			{					
				if (super.active && ((abs(char.groundspeed) >= 0x700)||(sonic.fastrunanim.timer > 0)))
				{	//SUPER FLOAT
					animationSpriteEx = ((level.framecounter>>1) & 0x01)
					key = stringformat("shadow_float_%d", animationSpriteEx)
				}
				else //Normal run or super but not fast enough
				{
					//global u8 ShadowFrameCounter //this controls custom animation frames
					//global u8 Shadow.RunFrameOld //this tracks the run frames
					if (shadow.FrameCounter == 0)
					{
						shadow.RunFrameOld = animationSprite
						shadow.FrameCounter = 3			
					}					
					if (shadow.RunFrameOld != animationSprite)
					{ //go up to 24 then restart to 2						
						if (shadow.FrameCounter < 38)
						{
							shadow.FrameCounter = shadow.FrameCounter +1							
						}
						else
						{							
							shadow.FrameCounter = 3
						}
					}					
					key = stringformat("shadow_run_%d", shadow.FrameCounter/3)					
					shadow.RunFrameOld = animationSprite
				}
			}
			
			//DROP DOWN
			if (shadow.DropDown)
			{
				//interrupt animation if not spinning or speed = 0
				if (char.state==char.state.ROLLING && char.velocity.y > 0)
				{				
					//windup
					if (shadow.FrameCounter < 4)
					{
						key = stringformat("shadow_prestomp_%d", shadow.FrameCounter/2)				
						shadow.FrameCounter = shadow.FrameCounter + 1
					}
					else //drop frames
					{
						animationSpriteEx = (level.framecounter >> 1) & 0x01
						key = stringformat("shadow_stomp_%d", animationSpriteEx)
					}
				}
				else
				{
					shadow.DropDown = false
					shadow.FrameCounter = 0
				}
			}
			
			//WALL LATCH
			if (shadow.WallLatch >1)
			{
			    if (!super.active || !super.active & 0x80 && !global.super_emeralds == 7)
            	{
                    loadCharacterPalette(CHARACTER_SONIC, 0x802000 + 0x00, 0)
                }
				if (char.state==char.state.ROLLING)
				{
					if (shadow.WallLatch == 3) //right wall
					{						
						key = "shadow_wall_latch_r"
					}
					else
					{
						key = "shadow_wall_latch_l"
					}
				}
				else	//WALL LATCH BROKEN BY SOMETHING
				{
					shadow.FrameCounter = 0				
					shadow.WallLatch = false
				}
			}
			
			//JUMP WHILE BOOSTING -- continue with that in mid air
			if (shadow.airBoost) //and in air?
			{
			    if (!super.active || !super.active & 0x80 && !global.super_emeralds == 7)
        	    {
            	    loadCharacterPalette(CHARACTER_SONIC, 0x802000 + 0x00, 0)
            	}
				if (char.state != char.state.RUNNING)
				{
					shadow.airBoost = false
				}
				else
				{
					key = "shadow_boost_air"
				}
			}			
		}
		
		timeattack.animSpriteEx = animationSpriteEx

		if (key == 0)
		{
			//fix super standing (also needed to be changed to look normal, but super/hyper shadow doesnt go into his waiting animation)
			if ((super.active && animationSprite == 0xbb) || (super.active && animationSprite == 0xbc))
			{
				animationSprite = 0xba
			}
			//Shadow has no second set of super sprites to use
			key = stringformat("character_slot3_0x%02x", animationSprite)
			
			if (!Renderer.hasCustomSprite(key))
			{
				u32 sourceBase    = (character == CHARACTER_SONIC) ? ((animationSprite >= 0xda) ? 0x140060 : 0x100000) : (character == CHARACTER_TAILS) ? ((animationSprite >= 0xd1) ? 0x143d00 : 0x3200e0) : 0x1200e0
				u32 tableAddress  = (character == CHARACTER_SONIC) ? (super.active ? 0x148378 : 0x148182) : (character == CHARACTER_TAILS) ? 0x14a08a : 0x14bd0a
				u32 mappingOffset = (character == CHARACTER_SONIC) ? (super.active ? 0x146816 : 0x146620) : (character == CHARACTER_TAILS) ? 0x148eb8 : 0x14a8d6		// Not really necessary here, we could also use "char.mapping_offset"

				key = Renderer.setupCustomCharacterSprite(sourceBase, tableAddress, mappingOffset, animationSprite, 0x00)
			}
		}
		//track current state for the next frame
		shadow.stateold = char.state
	}
	else // Tails' tails
	{
		//who cares, shadow has no tails!
	}

    //spring twirl mod support
    if (char.state == 0x31)
	{
		if (char.animation.timer>8)
		{
			char.animation.timer=8
		}
		if (char.animation.timer == 0)
		{
			char.animation.timer=8
			++char.animation.frame
		}
		if (char.velocity.y>=0)
		{
			fallingstate=1
			char.state = char.state.RUNNING
			char.animation.frame=0
		}
		if (char.animation.frame>=5)
		{
			char.animation.frame=0
		}
		key = stringformat("shadowspringtwirl_%d", char.animation.frame)
		if (char.animation.timer>6)
		{
			char.animation.timer=6
		}
	}
	else if (fallingsprites == 1 && char.state.former == char.state.STRAIGHTJUMP)
	{
		fallingstate = 1
	}
	
	if (tails.carrying == 1 || char.state == char.state.HANGING || (char.control_flags & 0x01))
	{
		fallingstate = 0
	}
	
	bool char_states = (char.state == char.state.STANDING || char.state == char.state.LOOKING_UP || char.state == char.state.COWERING)
	bool eggmobile_LBZ2 = (global.zone_act == 0x0601 && u8[0xfffff7ff] == 0xff)
	
	if (((((objA0.animation.sprite < 0x31 && char.state == char.state.RUNNING) || char_states) && fallingsprites == 1)) && (char.flags & char.flag.IN_AIR) && (fallingstate == 1 || char.velocity.y >= 282) && !shadow.DropDown && shadow.Homing == 0 && !shadow.isBoosting && !shadow.airBoost && shadow.Airdash == 0 && char.protection_flag == 0 && !eggmobile_LBZ2 && char.spindash != 0x80)
	{
		key = "shadow_fall"
	}

	u16 renderQueue = 0xa000 - char.sprite_priority
	u8 atex = (char.sprite_attributes >> 9) & 0x30
	if (EXTENDED_CHARACTER_PALETTES)
		atex = 0x40 + character * 0x20

	if (char.sprite_attributes & 0x8000)
		flags |= SPRITE_FLAG_PRIO

	if (rotationMode != 0 && global.inv_gravity)
	{
		// Correction for inverse gravity
		angle = 128 - angle
		flags ^= SPRITE_FLAG_FLIP_X
	}

    if ((char.state == 0x34 || char.state == 0x35) && global.zone == 0x05 && global.xtrachar == 3)
	{
		py -= 4
		key = stringformat("shadow_frozen_%d", (char.state == 0x35) ? 1 : 0)

		if Renderer.hasCustomSprite(key)
        {
            Renderer.drawCustomSprite(key, px, py, atex, 0, renderQueue)
            return true
        }
	}

	// Render character
	if (asSmallGhost)
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags | SPRITE_FLAG_PRIO, 0xa800, angle, 0xc0ffffff, 0x8000)
	}
	else
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, angle, 255)
	}

	bool useAfterImages
	if (isPlayer1)
	{
		//Handle shadow's homing and boost as well
		if ((super.active == 0xff) || (super.active.tails == 0xff) || shadow.isBoosting||shadow.Homing == 2)
		{
			useAfterImages = true
		}
		else
		{
			if (Game.getSetting(SETTING_SPEEDUP_AFTERIMGS))
			{
				useAfterImages = ((u8[characterAddress + 0x2b] & char.bonus.SPEED_UP) != 0)
			}
		}
	}

//SHADOW EFFECTS - START
//drop down flame
	if (shadow.DropDown > 0)
	{
		u64 key2 = stringformat("shadow_drop_%d", (level.framecounter & 0x03))
		//account for gravity --> 0x02		
		Renderer.drawCustomSprite(key2, px, py, atex, flags, renderQueue+1, 0, 200)
		if (shadow.DropDown ==2)
		{
			shadow.DropDown = 0
		}
	}
//air dash - same effect as wechnia's fly action start
	if (shadow.Airdash > 0)
	{
		if (shadow.Airdash == 1) //set the coordinates and the starting old camera
		{
			shadow.AirPX = px
			shadow.AirPY = py
			shadow.AirOLDX = camera.position.x.u16
			shadow.AirOLDY = camera.position.y.u16
		}
		//calculate where the effect moves on screen then set old camera coords
		shadow.AirPX = shadow.AirPX + (shadow.AirOLDX - camera.position.x.u16)
		shadow.AirPY = shadow.AirPY + (shadow.AirOLDY - camera.position.y.u16)
		shadow.AirOLDX = camera.position.x.u16
		shadow.AirOLDY = camera.position.y.u16
		
		u64 key2 = stringformat("shadow_airdash_%d", shadow.Airdash/2 )
		//account for gravity --> 0x02		
		Renderer.drawCustomSprite(key2, shadow.AirPX, shadow.AirPY, atex, flags, renderQueue-1, 0, 200)
		
		//Increase the counter and "kill" the object if needed
		shadow.Airdash = shadow.Airdash +1
		if (shadow.Airdash >=16)
		{
			shadow.Airdash = 0			
		}
	}
//boost wave - whevener a boost is initiated
	if (shadow.BoostWave > 0)
	{
	    if (!super.active || !super.active & 0x80 && !global.super_emeralds == 7)
	    {
    	    loadCharacterPalette(CHARACTER_SONIC, 0x802000 + 0x00, 0)
    	}
		if (shadow.BoostWave == 1) //set the coordinates and the starting old camera
		{
			shadow.BoostPX = px
			shadow.BoostPY = py
			shadow.BoostOLDX = camera.position.x.u16
			shadow.BoostOLDY = camera.position.y.u16
		}
		//calculate where the effect moves on screen then set old camera coords
		shadow.BoostPX = shadow.BoostPX + (shadow.BoostOLDX - camera.position.x.u16)
		shadow.BoostPY = shadow.BoostPY + (shadow.BoostOLDY - camera.position.y.u16)
		shadow.BoostOLDX = camera.position.x.u16
		shadow.BoostOLDY = camera.position.y.u16
		
		u64 key2 = stringformat("shadow_boost_start_%d", shadow.BoostWave/2 )
		//account for gravity --> 0x02		
		Renderer.drawCustomSprite(key2, shadow.BoostPX, shadow.BoostPY, atex, flags, renderQueue+1, 0, 200)
		//Increase the counter and "kill" the object if needed
		shadow.BoostWave = shadow.BoostWave +1
		if (shadow.BoostWave >=10)
		{
			shadow.BoostWave = 0			
		}
	}
//boost Flame -- just like the drop, but uses Shadow's angle too
//this one needs more work -> be angled on the carnival night bars
//be turned on horizontal circle running (aiz1 fbz...) done in airdash animation above
//also turn off the boost on non vertical spinning animations in hcz, cnz, ssz...
	if (shadow.isBoosting)
	{
		if (char.state == char.state.RUNNING)
		{			
    		if (!super.active || !super.active & 0x80 && !global.super_emeralds == 7)
    	    {
        	    loadCharacterPalette(CHARACTER_SONIC, 0x802000 + 0x00, 0)
        	}
			u64 key2 = stringformat("shadow_boost_%d", level.framecounter & 0x03)
			if (global.zone == 0x03 && (animationSprite >= 0x49 && animationSprite <= 0x54)) //carnival night pole. fbz uses some frames when entering cylinders, so I have to check the stage
			{
				if (shadow.rtlcnzbar)
				{
					Renderer.drawCustomSprite(key2, px, py, atex, flags, renderQueue+1, 0xe0, 200)
				}
				else
				{
					Renderer.drawCustomSprite(key2, px, py, atex, flags, renderQueue+1, 0x20, 200)
				}
			}
			else if (animationSprite >= 0x69 && animationSprite <= 0x77)||(animationSprite >= 0x49 && animationSprite <= 0x54)
			{ //if boosting on horizontal circle animation must account for the x position difference for the direction
				if (char.position.x.u16 >= shadow.BoostXTRACK) //no angle
					Renderer.drawCustomSprite(key2, px, py, atex, 0x00, renderQueue+1, 0x00, 200)
				else //flip X, no angle
					Renderer.drawCustomSprite(key2, px, py, atex, 0x01, renderQueue+1, 0x00, 200)				
			}			
			else //normal
			{
				Renderer.drawCustomSprite(key2, px, py, atex, flags, renderQueue+1, angle, 200)
			}
			shadow.BoostXTRACK = char.position.x.u16
		}
		else
		{
			shadow.isBoosting = false
		}
	}
	
	
//SHADOW EFFECTS - END	

	if (useAfterImages)
	{
		// Additional offset for Sonic charging a Super Peel-Out (either Hyper Sonic or with Speed Shoes)
		s16 afterImagesOffsetX = 0
		if (global.xtrachar == 3 && char.spindash == 0x80)
		{
			afterImagesOffsetX = (char.groundspeed >> 7) * ((char.flags & char.flag.FACING_LEFT) ? 1 : -1)
		}

		for (s8 i = 3; i > 0; --i)
		{
			A1 = 0xffffe500 + u8(posbackup.offset.player1 - (i * 8 + 4))
			s16 px0 = u16[A1] - camera.foreground.x.u16 + (i * afterImagesOffsetX / 4)
			s16 py0 = u16[A1+2] - camera.foreground.y.u16
			Renderer.drawCustomSprite(key, px0, py0, atex, flags, renderQueue - i, angle, 192 - i * 32)
		}
	}

	// Prevent emulator-like rendering
	
	return true
}