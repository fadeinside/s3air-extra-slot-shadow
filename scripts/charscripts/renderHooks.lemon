function string LivesandContinuesShadow()
{
	return (Mods.isModActive("Mania Style Data Select")) ? "dataSel_lifeContinue_shadow" : "dataSel_lifeContinue_slot3"
}

// if (objA0.mapping_offset == 0x3a1aee) replaced by
function void ExtraChar.Competition.drawCharacterSprite(s16 px, s16 py, u16 renderQueue)
{
	if (objA0.animation.timer == 0x05)
	{
		string key = Mods.isModActive("Mania Style Data Select") ? "dataSel_character_shadowm" : getShadowSprite()
		Renderer.drawCustomSprite(key, px, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
		return
	}
	
	// Call the base function
	base.ExtraChar.Competition.drawCharacterSprite(px, py, renderQueue)
}

// if (objA0.update_address == 0x00d42c) replaced by
function void ExtraChar.DataSelect.drawCharacterSprite(s16 px, s16 py, u16 renderQueue)
{
	if (objA0.animation.timer == 0x05)
	{
		string key = Mods.isModActive("Mania Style Data Select") ? "dataSel_character_shadowm" : getShadowSprite()

		if (hasPartner == 1)
		{
			// Shadow
			if (Renderer.hasCustomSprite(key))
				Renderer.drawCustomSprite(key, px - 0x07, py, atex, SPRITE_FLAG_PRIO | SPRITE_FLAG_FLIP_X, renderQueue)
			
			// Tails
			if (Renderer.hasCustomSprite("dataSel_character_tails"))
				Renderer.drawCustomSprite("dataSel_character_tails", px+7, py-2, 0x60, SPRITE_FLAG_PRIO | SPRITE_FLAG_FLIP_X, renderQueue)
			else
				Standalone.drawCharacterSpriteDirect(CHARACTER_TAILS, px+6, py-18, 0xa6, 0x00 | SPRITE_FLAG_FLIP_X, 0x60, renderQueue)
		}
		else
		{
			if (Renderer.hasCustomSprite(key))
				Renderer.drawCustomSprite(key, px, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
		}
		return
	}
	
	// Call the base function
	base.ExtraChar.DataSelect.drawCharacterSprite(px, py, renderQueue)
}

// if (objA0.update_address == 0x00d42c) replaced by
function void ExtraChar.DataSelect.drawCharacterIconsSprite(s16 px, s16 py, u16 renderQueue)
{
	if (objA0.animation.timer == 0x05)
	{
		string key
		if (Mods.isModActive("Data Select Character Sprites - MAIN"))
		{
			if (System.getGlobalVariableValueByName("MenuStyle.dataSelect") != 0)
			{
				if (System.getGlobalVariableValueByName("MenuStyle.noContinues") == 1)
				{
					key = (Mods.isModActive("Mania Style Data Select")) ? "dataSel_life_shadow" : "dataSel_life_slot3"
				}
				else
				{
					key = LivesandContinuesShadow()
				}
				if (Renderer.hasCustomSprite(key))
				{
					if (u8[A0 + 0x05] == 0x01 && u8[A0 + 0x08] != 0x01)
					{
						Renderer.drawCustomSprite(key, px - 16, py + ((System.getGlobalVariableValueByName("MenuStyle.noContinues") == 1) ? 24 : 8), 0x00, SPRITE_FLAG_PRIO, renderQueue)
					}
				}
			}
		}
		else
		{
			key = LivesandContinues()
			if (Renderer.hasCustomSprite(key))
			{
				if (u8[A0 + 0x05] == 0x01 && u8[A0 + 0x08] != 0x01)
				{
					Renderer.drawCustomSprite(key, px - 16, py + 8, 0x00, SPRITE_FLAG_PRIO, renderQueue)
				}
			}
		}
		
		key = LivesandContinues()
		if (Renderer.hasCustomSprite(key))
		{
			if (u8[A0 + 0x05] == 0x01 && u8[A0 + 0x08] != 0x01)
			{
				Renderer.drawCustomSprite(key, px - 16, py + 8, atex, SPRITE_FLAG_PRIO, renderQueue)
			}
		}
		return
	}
	
	// Call the base function
	base.ExtraChar.DataSelect.drawCharacterIconsSprite(px, py, renderQueue)
}

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	u8 gameMode = global.game_mode & 0x7f
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0
	u8 flags = ((objA0.render_flags & 0x01) ? SPRITE_FLAG_FLIP_X : 0) | ((objA0.render_flags & 0x02) ? SPRITE_FLAG_FLIP_Y : 0) | ((objA0.sprite_attributes & 0x8000) ? SPRITE_FLAG_PRIO : 0)
	{
	
	bool Mania_Title_Cards = (Renderer.hasCustomSprite("Result_NamePlate_Sonic"))
	
	if (objA0.update_address == 0x00d42c && !Mods.isModActive("Extra Save Slots"))
	{
		// не реализовано во фреймворке :/
    	if (!(Mods.isModActive("Mania Style Data Select")) && D1.u8 >= 8 && objA0.value3b != 0)
    	{
    		if (px >= 188 && px <= 208 && u16[0xffffb04a + 0x010] >= 0x130 && u16[0xffffb04a + 0x010] <= 0x0150)
            {
    			u64 portrait = 0
    			if (objA0.animation.sprite == 5 && objA0.animation.timer == 3)
				{
					if (u8[A0 + 0x23] == 0x18)
						portrait = "dataSel_savePortrait_slot3"
					else if (u8[A0 + 0x23] == 0x19)
						portrait = "dataSel_savePortrait_superslot3"
					else if (u8[A0 + 0x23] == 0x1b)
						portrait = "Clear_slot3"
				}
    			if (portrait != 0 && Renderer.hasCustomSprite(portrait))
    			{
    			#if GAMEAPP >= 0x22051500
    				Renderer.drawCustomSprite(portrait, px - 40, py - ((Mods.isModActive("Data Select Character Sprites - MAIN") && System.getGlobalVariableValueByName("MenuStyle.dataSelect") == 0) ? 128 : 120), 0, SPRITE_FLAG_PRIO, renderQueue)
    			#endif
    			#if GAMEAPP <= 0x22050800
    				Renderer.drawCustomSprite(portrait, px - 40, py - 120, 0, SPRITE_FLAG_PRIO, renderQueue)
    			#endif
    			}
            }
    }
	
	//ending screen for the best ending
	if (objA0.update_address == 0x200200 || objA0.update_address == 0x200300)
	{
		u8 atex = 0x40 + 5 * 0x20
		u64 key = (objA0.animation.sprite == 0x01 ? "character_slot3_0xbd": objA0.animation.sprite == 0x02 ? "character_slot3_0xbe": objA0.animation.sprite == 0x03 ? "character_slot3_0xb0": "character_slot3_0xb1")
		Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
		shadowp.paletteUpdate()

		return true
	}
	
	if (global.xtrachar == 3)
	{
    	if(objA0.update_address == 0x0837b2 && global.xtrachar == 3) //SIGNPOST
        {		
    		if(objA0.animation.sprite == 0x00 && global.xtrachar == 3)//SHADOW
    		{		
    			u8 atex = 0x40 + 0x20 * getMainCharacter()
    			if (global.zone_act == 0x0100)||(global.zone_act == 0x0101) //use the underwater colored for hydrocity 1 and 2 (the sign is moved during act transition)
    			{
    				Renderer.drawCustomSprite("goal_shadow_UW", px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0 , renderQueue)
    			}
    			else
    			{
    				Renderer.drawCustomSprite("goal_shadow", px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0 , renderQueue)
    			}
    			return true
    		}            
        }
        
    	if (PilotS == 0 && global.xtrachar == 3 && (objA0.update_address == 0x0677ce || objA0.update_address == 0x067800)) //0x05ea52
		{
			u64 key = "Sonic_Torn"
			Renderer.drawCustomSprite(key, px, py, 0, flags, renderQueue)
			return true
		}
    	
    	if ((objA0.update_address == 0x067472 || (isSonicIntro() && objA0.update_address == 0x01abb6 && objA0.base_state == 0x1A)) && global.xtrachar == 3)
    		{
    			u64 key = (objA0.animation.sprite == 0x21 ? "shadow_float_0": objA0.animation.sprite == 0x22 ? "shadow_float_1": "character_slot3_0x%02x")
    			u8 atex = 0x40 + getMainCharacter() * 0x20
    			Renderer.drawCustomSprite(stringformat(key, objA0.animation.sprite), px, py, atex, flags, renderQueue)
    			return true
    		}
    	//CHARACTERS TEXTS
    	//  - Character name			-> objA0.animation.sprite = 0x13 ... 0x16
    	if (objA0.update_address == 0x02dd98 && global.xtrachar == 3)
    	{
    		if (objA0.animation.sprite == 0x13 && global.xtrachar == 3)	// SHADOW
    		{
    		    if (Mania_Title_Cards)
    		    {
    		        Renderer.drawCustomSprite("Result_NamePlate_Shadow", px - 0x25, py - 0x4, 0x00, 0x40, renderQueue)
    		    }
    		    else
    		    {
    			    Renderer.drawCustomSprite("shadow_text", px + 0x15, py + 0x8, 0x00, 0x40, renderQueue)
    		    }
    			return true
    		}
    	}
    	
    	// CHARACTERS TEXTS FOR BLUESPHERES
    	//  - Character name			-> objA0.animation.sprite = 0x13 ... 0x16
    	// objA0.animation.sprite:
    	//  - 0x17, 0x31, 0x36 = "Score"
    	//  - 0x18, 0x32, 0x37 = "Ring Bonus"
    	//  - 0x19, 0x33, 0x38 = "Perfect"
    	//  - 0x1a, 0x34, 0x39 = "Continue"
    	//  - 0x13			   = "Sonic"
    	//  - 0x14			   = "Miles" (not verified)
    	//  - 0x15			   = "Tails"
    	//  - 0x16			   = "Knuckles" (not verified)
    	//  - 0x23			   = "got a"
    	//  - 0x24			   = "Chaos Emerald"
    	//  - 0x30			   = "Super Emerald"
    	if (gameMode == 0x48 || gameMode == 0x0c && global.xtrachar == 3)	// Blue Spheres results + fade to main game afterwards
    	{
    		// Blue Spheres results texts
    		if (objA0.update_address == 0x02ea50 || objA0.update_address == 0x02ec1e || objA0.update_address == 0x02dd98 && global.xtrachar == 3)
    		{
    			bool isSKStage = (global.lock_on_state == 0 && global.sk_bluespheres)
    			
    			if (objA0.animation.sprite == 0x13 || objA0.animation.sprite == 0x16)	// SHADOW
    			{
    			    if (Mania_Title_Cards)
    			        Renderer.drawCustomSprite("Result_NamePlate_Shadow", px, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
    			    else
    			    {
    				    Renderer.drawCustomSprite("shadow_text", px + ((objA0.animation.sprite == 0x13) ? 0x19 : 0x35), py + 0x8, 0x00, SPRITE_FLAG_PRIO, renderQueue)
    			    }
    				return true
    			}
    			
    			if (objA0.animation.sprite == 0x12 && Mania_Title_Cards)
				{
					if (global.super_emeralds == 7) // HYPER SHADOW
					{
						Renderer.drawCustomSprite( "Result_NamePlate_HyperK", px, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
						return true
					}
					else // SUPER SHADOW
					{
						Renderer.drawCustomSprite( "Result_NamePlate_SuperK", px, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
						return true
					}
				}
    		}
    	}
        //ENDING
    	//small characters on the tornado
    	//this object address is for BOTH the character ON the plane and the driver!
    	//check its subtype as well
    	if (objA0.update_address == 0x05ed18 && global.xtrachar == 3) //standing character
    	{				
    		if (objA0.subtype2c != 0) //standing character
    		{
    			u8 atex = 0x40 + 0x20 * getSecondCharacter()
    			u64 key
    			key = "ShadowMini"
    			Renderer.drawCustomSprite(key, px, py, atex, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue, 0, 255)		
    			return true
    		}
    		else //Pilot
    		{ // DON'T RENDER HERE
    			return false
    		}		
    
    	}
    	
    	//small and micro plane
    	//small plane and micro outside
    	//0x05d86a is contemporarily the small tornado flying right and the micro one flying left!
    	if(objA0.update_address == 0x05d86a && global.xtrachar == 3)
    	{    
    		//if flying left use the micro character
    		if (char.render_flags & 0x01)
    		{			
    		    u8 atex = 0x40 + 0x20 * getMainCharacter()
    	    	u64 spilot = (PilotS == 0) ? "Micro_Sonic" : "Micro_Tails"
		    	u64 plane = "Micro_Plane"
    			u64 key = "ShadowMicro"
    			
    			Renderer.drawCustomSprite(key, px, py, atex, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue+1)
    			Renderer.drawCustomSprite(spilot, px, py, 0, flags, renderQueue+1) // The Pilot and the plane
    			Renderer.drawCustomSprite(plane, px, py, 0, flags, renderQueue+1) // The Pilot and the plane
    			return true
    		}
    		else
    		{ //this would be the small tornado, so render normally.
    			return false
    		}		
    	}
    
        if (objA0.update_address == 0x05e18a && global.xtrachar == 3)
    		{
    			u64 key = "ShadowPose"
    			if (Renderer.hasCustomSprite(key))
    			{
    				Renderer.drawCustomSprite(key, px, py, 0x20, objA0.render_flags | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue)
    				return true
    			}
    		}
    	
    	if (global.game_mode == 0x14 && global.xtrachar == 3)
    	{
    			// Continue Icons
    			if (objA0.update_address == 0x05ca5c)
    			{
    				u64 key = continue_iconsShadow()
    				Renderer.drawCustomSprite(key, px, py, 0x00, flags, renderQueue)
    				return true
    			}
    			// Shadow waiting and running
    			if (objA0.animation.sprite >= 0x20 && objA0.animation.sprite <= 0xbe && objA0.update_address != 0x05c8c8)
    			{
    				u8 atex = 0x40 + getMainCharacter() * 0x20
    				u64 key = stringformat("character_slot3_0x%02x", objA0.animation.sprite)
    				Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
    				return true
    			}
    	}
    		// Continue icon
    	if ((objA0.update_address == 0x02ebe8 || objA0.update_address == 0x02ec4a) && objA0.animation.sprite >= 0x29 && objA0.animation.sprite <= 0x2b && global.xtrachar == 3)
    	{
    		u64 key = continue_iconsShadow()
    		Renderer.drawCustomSprite(key, px, py, 0x00, flags, renderQueue)
    		return true
    	}
    	//Bluespheres Palette
    	if (gameMode == 0x34 || gameMode == 0x48 || gameMode == 0x2c || gameMode == 0x30 || global.game_mode == 0x85 || global.game_mode == 0x87) && ((global.xtrachar == 3)) //just check for shadow, thanks!
    	{
    	    if (blueSphereEXS)
    			{
    				if (char.animation.sprite >= 0xb0 && char.animation.sprite <= 0xb4 && objA0.update_address != 0x04e202 && objA0.update_address != 0x04e2f0)
    				{
    				    u64 paletteKey = getCharacterPaletteKey(getMainCharacter())
    					if (System.hasExternalPaletteData(paletteKey, 0))
    					{
    						u16 numColors = System.loadExternalPaletteData(paletteKey, 0, 0x800000, 0x20)
    						if (numColors > 0)
    						{
    							u32 dest = 0x802180 + getMainCharacter() * 0x40
    							for (u16 i = 0; i < numColors; ++i)
    							{
    								u16[dest + i * 2] = packColor(u32[0x800000 + i * 4])
    								u16[dest + 2 * 12] = 0x0ecc
    								u16[dest + 2 * 13] = 0x0caa
    					    			u16[dest + 2 * 14] = 0x0866
    							}
    						}
    					}
    					u8 atex = 0x40 + getMainCharacter() * 0x20
    					u64 key = (char.animation.sprite != 0xb4 ? stringformat("character_slot3_0x%02x", objA0.animation.sprite) : "character_slot3_0xb3")
    					Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue + 1)
    					return true
    				}
    			}
    	    
    		// Characters in special stage
    		if (objA0.update_address == 0x00903e)// || objA0.update_address == 0x00927a) Just player one, thanks!
    		{
    			u8 character = getMainCharacter()
    			u8 atex = 0x00
    			u64 key
    			if (objA0.animation.sprite > 0x01 && objA0.animation.sprite < 0x09)
    			{
    				if (shadow.FrameCounter == 0)
    				{ //restart animation
    					shadow.RunFrameOld = objA0.animation.sprite
    					shadow.FrameCounter = 5
    				}
    				if (shadow.RunFrameOld != objA0.animation.sprite)
    				{
    					shadow.FrameCounter = shadow.FrameCounter + 1
    				}				
    				key = stringformat("bluesphere_shadow_%d", shadow.FrameCounter / 5)
    				if (shadow.FrameCounter >= 44)
    				{
    					shadow.FrameCounter = 5
    				}
    			}
    			else 
    			{
    				shadow.FrameCounter = 0
    				key = stringformat("bluesphere_slot3_0x%02x", objA0.animation.sprite)
    			}
    			if (!Renderer.hasCustomSprite(key)) //let's say someone deleted the bluespheres sprites...at least they'll see sonic...
    			{	
    				key = Renderer.setupCustomCharacterSprite(0x0aaa7c, 0x0abe14, objA0.mapping_offset, objA0.animation.sprite, 0x00)
    			}
    			Renderer.drawCustomSprite(key, px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue)
    			return true
    		}
            
            if (hasPartner == 1 && objA0.update_address == 0x00927a)
			{
				u8 character = getSecondCharacter()
				u8 atex = (character == CHARACTER_TAILS) ? 0x10 : 0x00
				u64 paletteKey = (character == CHARACTER_SONIC) ? "bluesphere_palette_sonic" : (character == CHARACTER_TAILS) ? "bluesphere_palette_tails" : "bluesphere_palette_knuckles"
				u64 key = stringformat((character == CHARACTER_SONIC) ? "bluesphere_sonic_0x%02x" : (character == CHARACTER_TAILS) ? "bluesphere_tails_0x%02x" : "bluesphere_knuckles_0x%02x", objA0.animation.sprite)
				u16 numColors = System.loadExternalPaletteData(paletteKey, 0, 0x800000, 0x20)
				if (numColors > 0)
				{
					u32 dest = 0x802180 + character * 0x40
					for (u16 i = 0; i < numColors; ++i)
					{
						u16[dest + i * 2] = packColor(u32[0x800000 + i * 4])
					}
				} 
				if (Renderer.hasCustomSprite(key))
				{
					// Check if there's also a custom palette
					if (System.hasExternalPaletteData(paletteKey, 0))
					{
						atex = 0x40 + character * 0x20
					}
				}
				else
				{
					if (character == CHARACTER_SONIC)
						key = Renderer.setupCustomCharacterSprite(0x0aaa7c, 0x0abe14, objA0.mapping_offset, objA0.animation.sprite, 0x00)
					else if (character == CHARACTER_TAILS)
						key = Renderer.setupCustomCharacterSprite(0x28f95a, 0x2908d2, objA0.mapping_offset, objA0.animation.sprite, 0x10)
					else
						key = Renderer.setupCustomCharacterSprite(0x0abf22, 0x0ad31a, objA0.mapping_offset, objA0.animation.sprite, 0x00)
				}
				Renderer.drawCustomSprite(key, px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue)
				return true
			}
            
            
    		// Tails' tails object in special stage isn't here...look in the real onWriteToSpriteTable!		
    	}
    	
    	//if (objA0.update_address >= 0x077822 && objA0.update_address <= 0x078018)
    	//{
    	//	u64 key
    	//	key = "ShadowMicro"
    	//	Renderer.drawCustomSprite(key, px, py,  0x00, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue+1)
    	//	return true
    	//
    	    
    	}
	}

	if (competition_mode.active && char.character == 5)
	{
		u8 atex = 0x40 + char.character * 0x20
		u64 key
		
		if (shadow.DropDown)
			{
			    u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(char.character, char.animation.sprite)
				//interrupt animation if not spinning or speed = 0
				if (char.state==char.state.ROLLING && char.velocity.y > 0)
				{				
					//windup
					if (shadow.FrameCounter < 4)
					{
						key = "comp_character_windup3"
						shadow.FrameCounter = shadow.FrameCounter + 1
					}
					else //drop frames
					{
						animationSpriteEx = (level.framecounter >> 1) & 0x01
						key = stringformat("comp_character_drop3_%d", animationSpriteEx)
					}
				}
				else
				{
					shadow.DropDown = false
					shadow.FrameCounter = 0
				}
				
				Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
				return true
			}
			
			//WALL LATCH
			if (shadow.WallLatch >1)
			{
				if (char.state==char.state.ROLLING)
				{
					key = "comp_character_Shadow_wall"
				}
				else	//WALL LATCH BROKEN BY SOMETHING
				{
					shadow.FrameCounter = 0				
					shadow.WallLatch = false
				}
				
				Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
				char.flags |= char.flag.CONTROL_LOCK
				return true
			}
			
			//JUMP WHILE BOOSTING -- continue with that in  air
			if (shadow.airBoost) //and in air?
			{
				if (char.state != char.state.RUNNING)
				{
					shadow.airBoost = false
				}
			}
	}
	
    return base.Standalone.onWriteToSpriteTable(px, py, renderQueue) 
}

function string getShadowSprite()
{
	return (Mods.isModActive("Mania Style Data Select")) ? "dataSel_character_shadowm" : "dataSel_slot3"
}

// EXTRA SLOT SAVES SHOULD BE BELOW THIS MOD but ABOVE EXTRA CHARACTER SLOTS!
function bool ESS_drawchar_Es3(s16 px, s16 py, bool no_save)
{
    if (hasPartner == 1)
	{
		
		if (Renderer.hasCustomSprite("charselect_tails"))
			Renderer.drawCustomSprite("charselect_tails", px+35, py+118, 0x60, SPRITE_FLAG_PRIO | SPRITE_FLAG_FLIP_X, 0x5000)
		else
			Standalone.drawCharacterSpriteDirect(CHARACTER_TAILS, px+35, py+120, 0xa6, SPRITE_FLAG_PRIO | SPRITE_FLAG_FLIP_X, 0x10, 0x5000)
	}
	s16 cx = (hasPartner == 1) ? px+54 : px+44
	s16 cy = (no_save) ? py+63 : py+137
	Renderer.drawSprite(getShadowSprite(), cx, cy, (hasPartner == 1) ? SPRITE_FLAG_PRIO | SPRITE_FLAG_FLIP_X : 0, 0, 0x6000)
	return true
}
    
function s32 ESS_saveboxgetcolor_Es3()
{
    return 0x581845
}

//Palette selection for Shadow
//SET THE PALETTE -- REGULAR GAME HAS ITS OWN ENTRY
function u64 getCharacterPaletteKey(u8 character)
{
	u8 gameMode = global.game_mode & 0x7f
	if (((global.xtrachar == 3 && character == CHARACTER_SONIC) && gameMode != 0x4c) || character == 5)
	{
	    if (shadow.isBoosting || shadow.Homing>1 || shadow.DropDown)
	    {
	        return "slot3boostPalette"
	    }
	    else
	    {
	        return "slot3palette"
	    }
	}
	
    return base.getCharacterPaletteKey(character)
}

function string continue_iconsShadow()
{
    return "continue_icon_slot3"
}

function void shadowp.paletteUpdate()
{
	u8 character = 5
	u16 blendFactor = clamp((super.palettefx.frame + (3 - super.palettefx.timer) * 6 / 2) * 0x100 / 0x44, 0, 0x100)
	u32 offset = character * 0x40
	u32 source = 0x802180 + offset
	u32 dest   = 0x802000 + offset
	zeroMemory(dest, 0x40)
	u16 numColors = System.loadExternalPaletteData(getCharacterPaletteKey(character), 0, 0x800000, 0x20)
	
	for (u16 i = 0; i < numColors; ++i)
	{
		u32 rgba = u32[0x800000 + i * 4]
		u16[dest + i * 2] = (rgba & 0xff000000) ? packColorExt(rgba) : 0
	}
	
	for (u8 k = 0; k < 0x40; k += 2)
	{
		if (u16[dest + k] == 0)
		{
			u16[dest + k] = u16[source + k]
		}
		else
		{
			// Flash during the S3&K logo
			if (super.palettefx.frame >= 0xa0 && super.palettefx.frame <= 0xab)
			{
				u16[dest + k] = blendColorsPacked(0x0222, 0x0eee, 0)
			}
			else if (super.palettefx.frame >= 0xac && super.palettefx.frame <= 0xb7)
			{
				u16[dest + k] = blendColorsPacked(0x0444, 0x0222, 0)
			}
			else if (super.palettefx.frame >= 0xb8 && super.palettefx.frame <= 0xc3)
			{
				u16[dest + k] = blendColorsPacked(0x0666, 0x0444, 0)
			}
			else if (super.palettefx.frame >= 0xc4 && super.palettefx.frame <= 0xcf)
			{
				u16[dest + k] = blendColorsPacked(0x0888, 0x0666, 0)
			}
			else if (super.palettefx.frame >= 0xd0 && super.palettefx.frame <= 0xdb)
			{
				u16[dest + k] = blendColorsPacked(0x0aaa, 0x0888, 0)
			}
			else if (super.palettefx.frame >= 0xdc && super.palettefx.frame <= 0xe5)
			{
				u16[dest + k] = blendColorsPacked(0x0ccc, 0x0aaa, 0)
			}
			else if (super.palettefx.frame >= 0xe6 && super.palettefx.frame <= 0x0142)
			{
				u16[dest + k] = blendColorsPacked(0x0eee, u16[dest + k], blendFactor * 9/10) // Fade in from white
			}
			else
			{
				return
			}
		}
	}
}

function void Char3_end()
{
    spawnChildObject(0x200080, 0x00, 0, 0)
}

function void shadowoncoords()
{
    objA0.position.x.u16 = 380
    objA0.position.y.u16 = 304
}

//so that Mighty gets positioned correctly
function void Mighty_Coords()
{
    objA0.position.x.u16 = (global.xtrachar == 3) ? 333 : 254
    objA0.position.y.u16 = 304
}

//# address-hook(0x200080) end(0x200100)
function void Draw.shadow1()
{
	setupObjectAttributesMost(0x060160)
	objA0.render_flags &= ~0x04
	objA0.update_address = 0x200200
	
	shadowoncoords()

	copyMemory(0xfffffc80, 0x0a8a3c, 0x20)

	if (allocDynamicObjectStd())
	{
		objA1.update_address = 0x05ff62
		u16[A1 + 0x30] = 0xfc02
		u16[A1 + 0x32] = 0xfc82
		u16[A1 + 0x3a] = 0x0e
	}
}

//# address-hook(0x200200) end(0x200220)
function void Draw.shadow2()
{
	Object.animationProgress(0x06025c)
	if (u8[0xfffffab8] & 0x04)
	{
		objA0.update_address = 0x200300
		A1 = 0x060260
		fn084580()
	}
	DrawObject()
}

//# address-hook(0x200300) end(0x200320)
function void Draw.shadow3()
{
	Object.AnimationProgressByLocalA1()
	DrawObject()
}

function bool Standalone.onDrawVdpSpriteCompound(s16 px, s16 py, u8 size, u16 index, u16 renderQueue, u8 spriteCounter)
{
    if (objA0.update_address == 0x00d30c || objA0.update_address == 0x00d42c)
    {
        if (index == 0xab0b || index == 0xab17)    //Sonic icon
        {
            if (objA0.animation.sprite == 5 && objA0.animation.timer == 3)
            {
                u64 key
                if (Mods.isModActive("Mania Style Data Select"))
					key = "dataSel_character_shadowm"
				else
                    key = getShadowSprite()
                if (Renderer.hasCustomSprite(key))
                {
                    return true
                }
            }
        }
    }

	if (D1.u8 >= 8 && objA0.value3b != 0)
	{
		if (px >= 120 && px <= 280 && u16[0xffffb04a + 0x010] >= 0x130 && u16[0xffffb04a + 0x010] <= 0x0150)
        {
			u64 key = 0
			if (objA0.animation.sprite == 5 && objA0.animation.timer == 3)
			{
				if (u8[A0 + 0x23] == 0x18)
					key = "dataSel_savePortrait_slot3"
				else if (u8[A0 + 0x23] == 0x19)
					key = "dataSel_savePortrait_superslot3"
				else if (u8[A0 + 0x23] == 0x1b)
					key = "Clear_slot3"
			}
			if (key != 0 && Renderer.hasCustomSprite(key))
			{
				return true
			}
        }
    }
    
    
   
    return base.Standalone.onDrawVdpSpriteCompound(px, py, size, index, renderQueue, spriteCounter)
}

global bool PilotS
// Zoomed out sonic head
//# address-hook(0x05ecb4) end(0x05ed0c)
function void fn05ecb4()
{
    if (global.xtrachar != 3)
    {
        base.fn05ecb4()
        return
    }

    setupObjectAttributesFull(0x0600e6)

    A1 = 0xffff0000 + u16[A0 + 0x46]
    u8[A0 + 0x0a] = (u8[A0 + 0x0a] & ~0x80) | (u8[A1 + 0x0a] & 0x80)
    if ((u8[A1 + 0x04] & 0x04) == 0)
    {
        objA0.render_flags &= ~0x04
    }

    objA0.update_address = 0x05ed18
	u16 offset

	if (PilotS == 0)
	{
    	offset = 2 * 2 // Sonic Pilots the plane
	}
	else
	{
		offset = global.characters // Tails Pilots the plane
		offset *= 2
	}

    if (objA0.subtype2c != 0)
    {
        ++offset
    }
    objA0.animation.sprite = u8[0x05ed0e + offset]
}

// Regular sized sonic head
//# address-hook(0x05eb32) end(0x05eb66)
function void fn05eb32()
{
	 if (global.xtrachar != 3)
    {
        base.fn05eb32()
        return
    }
	objA0.update_address = 0x05ebb4

	A1 = 0xffff0000 + u16[A0 + 0x46]
	objA0.sprite_priority = u16[A1 + 0x08]
	objA0.box_size.x = 0x20
	objA0.box_size.y = 0x20
	if (u8[A1 + 0x04] & 0x04)
	{
		objA0.render_flags |= 0x04
	}

	// Targets:
	//  - 0x05eb72	-> global.characters = CHARS_SONIC_AND_TAILS
	//  - 0x05eb72	-> global.characters = CHARS_SONIC_ALONE
	//  - 0x05eb88	-> global.characters = CHARS_TAILS_ALONE
	//  - 0x05eb9e	-> global.characters = CHARS_KNUCKLES_ALONE
	call tableLookupAddress(0x05eb6a,(PilotS == 0) ? (2 * 2) : (global.characters * 2)) // Tails or Sonic PilotS the plane
}